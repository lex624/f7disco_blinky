
f7disco_blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021e8  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080023e0  080023e0  000033e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023f0  080023f0  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  080023f0  080023f0  000033f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080023f8  080023f8  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023f8  080023f8  000033f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080023fc  080023fc  000033fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002400  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  0800240c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  0800240c  0000402c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_line   00008823  00000000  00000000  0000403a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000064  00000000  00000000  0000c85d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00005e8f  00000000  00000000  0000c8c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001513  00000000  00000000  00012750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000005c0  00000000  00000000  00013c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0012e7cc  00000000  00000000  00014228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000042a  00000000  00000000  001429f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003120a  00000000  00000000  00142e1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00174028  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000014dc  00000000  00000000  0017406c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080023c8 	.word	0x080023c8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080023c8 	.word	0x080023c8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000528:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000560 <LoopFillZerobss+0xe>
 
/* Call the clock system initialization function.*/
  bl  SystemInit   
 800052c:	f000 fb06 	bl	8000b3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000530:	480c      	ldr	r0, [pc, #48]	@ (8000564 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000532:	490d      	ldr	r1, [pc, #52]	@ (8000568 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000534:	4a0d      	ldr	r2, [pc, #52]	@ (800056c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000538:	e002      	b.n	8000540 <LoopCopyDataInit>

0800053a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800053a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800053c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800053e:	3304      	adds	r3, #4

08000540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000544:	d3f9      	bcc.n	800053a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000546:	4a0a      	ldr	r2, [pc, #40]	@ (8000570 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000548:	4c0a      	ldr	r4, [pc, #40]	@ (8000574 <LoopFillZerobss+0x22>)
  movs r3, #0
 800054a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800054c:	e001      	b.n	8000552 <LoopFillZerobss>

0800054e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800054e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000550:	3204      	adds	r2, #4

08000552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000554:	d3fb      	bcc.n	800054e <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 8000556:	f001 ff13 	bl	8002380 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800055a:	f000 fad1 	bl	8000b00 <main>
  bx  lr    
 800055e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000560:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000564:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000568:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800056c:	08002400 	.word	0x08002400
  ldr r2, =_sbss
 8000570:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000574:	2000002c 	.word	0x2000002c

08000578 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000578:	e7fe      	b.n	8000578 <ADC_IRQHandler>
	...

0800057c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000580:	f3bf 8f4f 	dsb	sy
}
 8000584:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000586:	f3bf 8f6f 	isb	sy
}
 800058a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800058c:	4b0d      	ldr	r3, [pc, #52]	@ (80005c4 <SCB_EnableICache+0x48>)
 800058e:	2200      	movs	r2, #0
 8000590:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000594:	f3bf 8f4f 	dsb	sy
}
 8000598:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800059a:	f3bf 8f6f 	isb	sy
}
 800059e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005a0:	4b08      	ldr	r3, [pc, #32]	@ (80005c4 <SCB_EnableICache+0x48>)
 80005a2:	695b      	ldr	r3, [r3, #20]
 80005a4:	4a07      	ldr	r2, [pc, #28]	@ (80005c4 <SCB_EnableICache+0x48>)
 80005a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005aa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005ac:	f3bf 8f4f 	dsb	sy
}
 80005b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005b2:	f3bf 8f6f 	isb	sy
}
 80005b6:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	e000ed00 	.word	0xe000ed00

080005c8 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80005ce:	4b24      	ldr	r3, [pc, #144]	@ (8000660 <SCB_EnableDCache+0x98>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80005d6:	f3bf 8f4f 	dsb	sy
}
 80005da:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80005dc:	4b20      	ldr	r3, [pc, #128]	@ (8000660 <SCB_EnableDCache+0x98>)
 80005de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80005e2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	0b5b      	lsrs	r3, r3, #13
 80005e8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80005ec:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	08db      	lsrs	r3, r3, #3
 80005f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80005f6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	015a      	lsls	r2, r3, #5
 80005fc:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000600:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000602:	68ba      	ldr	r2, [r7, #8]
 8000604:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000606:	4916      	ldr	r1, [pc, #88]	@ (8000660 <SCB_EnableDCache+0x98>)
 8000608:	4313      	orrs	r3, r2
 800060a:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	1e5a      	subs	r2, r3, #1
 8000612:	60ba      	str	r2, [r7, #8]
 8000614:	2b00      	cmp	r3, #0
 8000616:	bf14      	ite	ne
 8000618:	2301      	movne	r3, #1
 800061a:	2300      	moveq	r3, #0
 800061c:	b2db      	uxtb	r3, r3
 800061e:	2b00      	cmp	r3, #0
 8000620:	d1ea      	bne.n	80005f8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	1e5a      	subs	r2, r3, #1
 8000626:	60fa      	str	r2, [r7, #12]
 8000628:	2b00      	cmp	r3, #0
 800062a:	bf14      	ite	ne
 800062c:	2301      	movne	r3, #1
 800062e:	2300      	moveq	r3, #0
 8000630:	b2db      	uxtb	r3, r3
 8000632:	2b00      	cmp	r3, #0
 8000634:	d1db      	bne.n	80005ee <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000636:	f3bf 8f4f 	dsb	sy
}
 800063a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800063c:	4b08      	ldr	r3, [pc, #32]	@ (8000660 <SCB_EnableDCache+0x98>)
 800063e:	695b      	ldr	r3, [r3, #20]
 8000640:	4a07      	ldr	r2, [pc, #28]	@ (8000660 <SCB_EnableDCache+0x98>)
 8000642:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000646:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000648:	f3bf 8f4f 	dsb	sy
}
 800064c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800064e:	f3bf 8f6f 	isb	sy
}
 8000652:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000654:	bf00      	nop
 8000656:	3714      	adds	r7, #20
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <_Z16SystemInitializev>:
//
//Used to initialize CPU caches, NVIC and SysTick, as well as oscillators, PLLs, system clocks, bus clocks and some peripheral clocks
//Also enables all GPIO ports, and both DMA1 and DMA2 peripherals
//
//Returns OK if successful, or Fail if initialization failed
Result SystemInitialize(void) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b0c6      	sub	sp, #280	@ 0x118
 8000668:	af00      	add	r7, sp, #0

  //------------------------------------
  //Enable CPU Instruction & Data Caches
  SCB_EnableICache();
 800066a:	f7ff ff87 	bl	800057c <SCB_EnableICache>
  SCB_EnableDCache();
 800066e:	f7ff ffab 	bl	80005c8 <SCB_EnableDCache>

	//----------------------
	//Enable ART Accelerator
  __HAL_FLASH_ART_ENABLE();
 8000672:	4b67      	ldr	r3, [pc, #412]	@ (8000810 <_Z16SystemInitializev+0x1ac>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a66      	ldr	r2, [pc, #408]	@ (8000810 <_Z16SystemInitializev+0x1ac>)
 8000678:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800067c:	6013      	str	r3, [r2, #0]

  //---------------------
  //Enable Flash Prefetch
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800067e:	4b64      	ldr	r3, [pc, #400]	@ (8000810 <_Z16SystemInitializev+0x1ac>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a63      	ldr	r2, [pc, #396]	@ (8000810 <_Z16SystemInitializev+0x1ac>)
 8000684:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000688:	6013      	str	r3, [r2, #0]

  //--------------------------
  //Set NVIC Priority Grouping
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800068a:	2003      	movs	r0, #3
 800068c:	f000 fb8e 	bl	8000dac <HAL_NVIC_SetPriorityGrouping>

  //------------
  //Init SysTick
  HAL_InitTick(TICK_INT_PRIORITY);
 8000690:	2000      	movs	r0, #0
 8000692:	f000 fa65 	bl	8000b60 <HAL_InitTick>

  //------------------------------
  //Configure LSE Drive Capability
  HAL_PWR_EnableBkUpAccess();
 8000696:	f000 fd83 	bl	80011a0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800069a:	4b5e      	ldr	r3, [pc, #376]	@ (8000814 <_Z16SystemInitializev+0x1b0>)
 800069c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800069e:	4a5d      	ldr	r2, [pc, #372]	@ (8000814 <_Z16SystemInitializev+0x1b0>)
 80006a0:	f023 0318 	bic.w	r3, r3, #24
 80006a4:	6713      	str	r3, [r2, #112]	@ 0x70

  //------------------------------------------------
  //Configure Main Internal Regulator Output Voltage
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a6:	4b5b      	ldr	r3, [pc, #364]	@ (8000814 <_Z16SystemInitializev+0x1b0>)
 80006a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006aa:	4a5a      	ldr	r2, [pc, #360]	@ (8000814 <_Z16SystemInitializev+0x1b0>)
 80006ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80006b2:	4b58      	ldr	r3, [pc, #352]	@ (8000814 <_Z16SystemInitializev+0x1b0>)
 80006b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80006bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006be:	4b56      	ldr	r3, [pc, #344]	@ (8000818 <_Z16SystemInitializev+0x1b4>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a55      	ldr	r2, [pc, #340]	@ (8000818 <_Z16SystemInitializev+0x1b4>)
 80006c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006c8:	6013      	str	r3, [r2, #0]
 80006ca:	4b53      	ldr	r3, [pc, #332]	@ (8000818 <_Z16SystemInitializev+0x1b4>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80006d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
  //
  //Configure High Speed External (HSE) oscillator to be used for primary system clocks, and setup primary PLL to provide a 216MHz clock
  //Configure Low Speed External (LSE) oscillator to be used for clock source for Real Timer Clock (RTC) peripheral
  //NOTE: HSE Oscillator on STM32F769I-DISCO/STM32F769I-DISC1 board is provided by a 25MHz oscillator (labeled X2 on the PCB)
  //      LSE Oscillator on STM32F769I-DISCO/STM32F769I-DISC1 board is provided by a 32.768kHz oscillator (labeled X3 on the PCB)
  RCC_OscInitTypeDef RCC_OscInit = {0};
 80006d6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80006da:	2234      	movs	r2, #52	@ 0x34
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 fe46 	bl	8002370 <memset>
  RCC_OscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE | //Define HSE (High Speed External) oscillator to be configured (used for main system clock)
 80006e4:	2305      	movs	r3, #5
 80006e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  		                         RCC_OSCILLATORTYPE_LSE;  //Define LSE (Low Speed External) oscillator to be configured (used for RTC - Real Time Clock)
  RCC_OscInit.HSEState       = RCC_HSE_ON;              //Enable HSE
 80006ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  RCC_OscInit.LSEState       = RCC_LSE_ON;              //Enable LSE
 80006f2:	2301      	movs	r3, #1
 80006f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  RCC_OscInit.PLL.PLLState   = RCC_PLL_ON;              //Enable primary PLL
 80006f8:	2302      	movs	r3, #2
 80006fa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  RCC_OscInit.PLL.PLLSource  = RCC_PLLSOURCE_HSE;       //Set primary PLL source to HSE
 80006fe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000702:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100

    //Set primary PLL values required for 216Mhz system clock
  RCC_OscInit.PLL.PLLM       = 25;
 8000706:	2319      	movs	r3, #25
 8000708:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  RCC_OscInit.PLL.PLLN       = 432;
 800070c:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8000710:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
  RCC_OscInit.PLL.PLLP       = RCC_PLLP_DIV2;
 8000714:	2302      	movs	r3, #2
 8000716:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  RCC_OscInit.PLL.PLLQ       = 4;
 800071a:	2304      	movs	r3, #4
 800071c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

  if (HAL_RCC_OscConfig(&RCC_OscInit) != HAL_OK) {  //Initialize Oscillators using values in init structure
 8000720:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000724:	4618      	mov	r0, r3
 8000726:	f000 fd9b 	bl	8001260 <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	bf14      	ite	ne
 8000730:	2301      	movne	r3, #1
 8000732:	2300      	moveq	r3, #0
 8000734:	b2db      	uxtb	r3, r3
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <_Z16SystemInitializev+0xda>
  	return Fail;
 800073a:	2301      	movs	r3, #1
 800073c:	e143      	b.n	80009c6 <_Z16SystemInitializev+0x362>
  }

  //-------------------
  //Enable SysCfg Clock
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073e:	4b35      	ldr	r3, [pc, #212]	@ (8000814 <_Z16SystemInitializev+0x1b0>)
 8000740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000742:	4a34      	ldr	r2, [pc, #208]	@ (8000814 <_Z16SystemInitializev+0x1b0>)
 8000744:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000748:	6453      	str	r3, [r2, #68]	@ 0x44
 800074a:	4b32      	ldr	r3, [pc, #200]	@ (8000814 <_Z16SystemInitializev+0x1b0>)
 800074c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800074e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000752:	637b      	str	r3, [r7, #52]	@ 0x34
 8000754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

  //---------------------
  //Enable Overdrive Mode
  //
  //This is required to provide best system stability given that we are running at the maximum clock rate of 216MHz for the STM32F769I device
  if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8000756:	f000 fd33 	bl	80011c0 <HAL_PWREx_EnableOverDrive>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	bf14      	ite	ne
 8000760:	2301      	movne	r3, #1
 8000762:	2300      	moveq	r3, #0
 8000764:	b2db      	uxtb	r3, r3
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <_Z16SystemInitializev+0x10a>
  	return Fail;
 800076a:	2301      	movs	r3, #1
 800076c:	e12b      	b.n	80009c6 <_Z16SystemInitializev+0x362>
  }

  //---------------------------
  //Initialize CPU & Bus Clocks
  RCC_ClkInitTypeDef RCC_ClkInit = {0};
 800076e:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]
  RCC_ClkInit.ClockType      = RCC_CLOCKTYPE_HCLK |      //Define which clocks are to be configured (HCLK, SYSCLK, PCLK1, PCLK2)
 800077e:	230f      	movs	r3, #15
 8000780:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  		                         RCC_CLOCKTYPE_SYSCLK |
                               RCC_CLOCKTYPE_PCLK1 |
															 RCC_CLOCKTYPE_PCLK2;

  RCC_ClkInit.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;  //Define primary PLL clock as system clock source
 8000784:	2302      	movs	r3, #2
 8000786:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  RCC_ClkInit.AHBCLKDivider  = RCC_SYSCLK_DIV1;          //Set clock divider for host bus (AHB), DIV1 provides an AHB frequency of 216MHz
 800078a:	2300      	movs	r3, #0
 800078c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

  RCC_ClkInit.APB1CLKDivider = RCC_HCLK_DIV4;            //Set clock divider for peripheral bus 1 (APB1), DIV4 provides an APB1 frequency of 54MHz
 8000790:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000794:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                                                         //NOTE: APB1 timer clocks are clock doubled, providing APB1 timers with 108MHz

  RCC_ClkInit.APB2CLKDivider = RCC_HCLK_DIV2;            //Set clock divider for peripheral bus 2 (APB2), DIV2 provides an APB2 frequency of 108MHz
 8000798:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800079c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
                                                         //NOTE: APB2 timer clocks are clock doubled, providing APB2 timers with 216MHz clocks

  if (HAL_RCC_ClockConfig(&RCC_ClkInit, FLASH_LATENCY_7) != HAL_OK) { //Initialize system clocks using required values, and setting Flash latency to 7 cycles
 80007a0:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80007a4:	2107      	movs	r1, #7
 80007a6:	4618      	mov	r0, r3
 80007a8:	f001 f808 	bl	80017bc <HAL_RCC_ClockConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	bf14      	ite	ne
 80007b2:	2301      	movne	r3, #1
 80007b4:	2300      	moveq	r3, #0
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <_Z16SystemInitializev+0x15c>
  	return Fail;
 80007bc:	2301      	movs	r3, #1
 80007be:	e102      	b.n	80009c6 <_Z16SystemInitializev+0x362>
  }

  //----------------------------
  //Initialize Peripheral Clocks
  RCC_PeriphCLKInitTypeDef RCC_PeriphClkInit = {0};
 80007c0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80007c4:	2290      	movs	r2, #144	@ 0x90
 80007c6:	2100      	movs	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f001 fdd1 	bl	8002370 <memset>
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC |
 80007ce:	2328      	movs	r3, #40	@ 0x28
 80007d0:	643b      	str	r3, [r7, #64]	@ 0x40
  		                                     RCC_PERIPHCLK_LTDC;

    //Define settings for PLLSAI, as this PLL is also used as the clock source for the LTDC peripheral which we require to run the LCD screen
	RCC_PeriphClkInit.PLLSAI.PLLSAIN       = 384;
 80007d2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80007d6:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_PeriphClkInit.PLLSAI.PLLSAIP       = RCC_PLLSAIP_DIV8;
 80007d8:	2303      	movs	r3, #3
 80007da:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_PeriphClkInit.PLLSAI.PLLSAIR       = 7;
 80007dc:	2307      	movs	r3, #7
 80007de:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_PeriphClkInit.PLLSAI.PLLSAIQ       = 8;
 80007e0:	2308      	movs	r3, #8
 80007e2:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_PeriphClkInit.PLLSAIDivQ           = 1;
 80007e4:	2301      	movs	r3, #1
 80007e6:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_PeriphClkInit.PLLSAIDivR           = RCC_PLLSAIDIVR_2;
 80007e8:	2300      	movs	r3, #0
 80007ea:	66fb      	str	r3, [r7, #108]	@ 0x6c

  RCC_PeriphClkInit.RTCClockSelection    = RCC_RTCCLKSOURCE_LSE; //Set the LSE oscillator as the clock source for the Real Time Clock
 80007ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007f0:	673b      	str	r3, [r7, #112]	@ 0x70

  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit) != HAL_OK) { //Initialize the peripheral clocks used the required values
 80007f2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80007f6:	4618      	mov	r0, r3
 80007f8:	f001 f992 	bl	8001b20 <HAL_RCCEx_PeriphCLKConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	bf14      	ite	ne
 8000802:	2301      	movne	r3, #1
 8000804:	2300      	moveq	r3, #0
 8000806:	b2db      	uxtb	r3, r3
 8000808:	2b00      	cmp	r3, #0
 800080a:	d007      	beq.n	800081c <_Z16SystemInitializev+0x1b8>
  	return Fail;
 800080c:	2301      	movs	r3, #1
 800080e:	e0da      	b.n	80009c6 <_Z16SystemInitializev+0x362>
 8000810:	40023c00 	.word	0x40023c00
 8000814:	40023800 	.word	0x40023800
 8000818:	40007000 	.word	0x40007000
  }

  //------------------
  //Enable GPIO Clocks
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081c:	4b6c      	ldr	r3, [pc, #432]	@ (80009d0 <_Z16SystemInitializev+0x36c>)
 800081e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000820:	4a6b      	ldr	r2, [pc, #428]	@ (80009d0 <_Z16SystemInitializev+0x36c>)
 8000822:	f043 0301 	orr.w	r3, r3, #1
 8000826:	6313      	str	r3, [r2, #48]	@ 0x30
 8000828:	4b69      	ldr	r3, [pc, #420]	@ (80009d0 <_Z16SystemInitializev+0x36c>)
 800082a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082c:	f003 0301 	and.w	r3, r3, #1
 8000830:	633b      	str	r3, [r7, #48]	@ 0x30
 8000832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000834:	4b66      	ldr	r3, [pc, #408]	@ (80009d0 <_Z16SystemInitializev+0x36c>)
 8000836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000838:	4a65      	ldr	r2, [pc, #404]	@ (80009d0 <_Z16SystemInitializev+0x36c>)
 800083a:	f043 0302 	orr.w	r3, r3, #2
 800083e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000840:	4b63      	ldr	r3, [pc, #396]	@ (80009d0 <_Z16SystemInitializev+0x36c>)
 8000842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000844:	f003 0302 	and.w	r3, r3, #2
 8000848:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800084a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084c:	4b60      	ldr	r3, [pc, #384]	@ (80009d0 <_Z16SystemInitializev+0x36c>)
 800084e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000850:	4a5f      	ldr	r2, [pc, #380]	@ (80009d0 <_Z16SystemInitializev+0x36c>)
 8000852:	f043 0304 	orr.w	r3, r3, #4
 8000856:	6313      	str	r3, [r2, #48]	@ 0x30
 8000858:	4b5d      	ldr	r3, [pc, #372]	@ (80009d0 <_Z16SystemInitializev+0x36c>)
 800085a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085c:	f003 0304 	and.w	r3, r3, #4
 8000860:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000864:	4b5a      	ldr	r3, [pc, #360]	@ (80009d0 <_Z16SystemInitializev+0x36c>)
 8000866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000868:	4a59      	ldr	r2, [pc, #356]	@ (80009d0 <_Z16SystemInitializev+0x36c>)
 800086a:	f043 0308 	orr.w	r3, r3, #8
 800086e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000870:	4b57      	ldr	r3, [pc, #348]	@ (80009d0 <_Z16SystemInitializev+0x36c>)
 8000872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000874:	f003 0308 	and.w	r3, r3, #8
 8000878:	627b      	str	r3, [r7, #36]	@ 0x24
 800087a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800087c:	4b54      	ldr	r3, [pc, #336]	@ (80009d0 <_Z16SystemInitializev+0x36c>)
 800087e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000880:	4a53      	ldr	r2, [pc, #332]	@ (80009d0 <_Z16SystemInitializev+0x36c>)
 8000882:	f043 0310 	orr.w	r3, r3, #16
 8000886:	6313      	str	r3, [r2, #48]	@ 0x30
 8000888:	4b51      	ldr	r3, [pc, #324]	@ (80009d0 <_Z16SystemInitializev+0x36c>)
 800088a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088c:	f003 0310 	and.w	r3, r3, #16
 8000890:	623b      	str	r3, [r7, #32]
 8000892:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000894:	4b4e      	ldr	r3, [pc, #312]	@ (80009d0 <_Z16SystemInitializev+0x36c>)
 8000896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000898:	4a4d      	ldr	r2, [pc, #308]	@ (80009d0 <_Z16SystemInitializev+0x36c>)
 800089a:	f043 0320 	orr.w	r3, r3, #32
 800089e:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a0:	4b4b      	ldr	r3, [pc, #300]	@ (80009d0 <_Z16SystemInitializev+0x36c>)
 80008a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a4:	f003 0320 	and.w	r3, r3, #32
 80008a8:	61fb      	str	r3, [r7, #28]
 80008aa:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008ac:	4b48      	ldr	r3, [pc, #288]	@ (80009d0 <_Z16SystemInitializev+0x36c>)
 80008ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b0:	4a47      	ldr	r2, [pc, #284]	@ (80009d0 <_Z16SystemInitializev+0x36c>)
 80008b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b8:	4b45      	ldr	r3, [pc, #276]	@ (80009d0 <_Z16SystemInitializev+0x36c>)
 80008ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008bc:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 80008c0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80008c4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80008ce:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80008d2:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d4:	4b3e      	ldr	r3, [pc, #248]	@ (80009d0 <_Z16SystemInitializev+0x36c>)
 80008d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d8:	4a3d      	ldr	r2, [pc, #244]	@ (80009d0 <_Z16SystemInitializev+0x36c>)
 80008da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008de:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e0:	4b3b      	ldr	r3, [pc, #236]	@ (80009d0 <_Z16SystemInitializev+0x36c>)
 80008e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e4:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 80008e8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80008ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80008f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80008fa:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80008fc:	4b34      	ldr	r3, [pc, #208]	@ (80009d0 <_Z16SystemInitializev+0x36c>)
 80008fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000900:	4a33      	ldr	r2, [pc, #204]	@ (80009d0 <_Z16SystemInitializev+0x36c>)
 8000902:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000906:	6313      	str	r3, [r2, #48]	@ 0x30
 8000908:	4b31      	ldr	r3, [pc, #196]	@ (80009d0 <_Z16SystemInitializev+0x36c>)
 800090a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8000910:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000914:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800091e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000922:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000924:	4b2a      	ldr	r3, [pc, #168]	@ (80009d0 <_Z16SystemInitializev+0x36c>)
 8000926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000928:	4a29      	ldr	r2, [pc, #164]	@ (80009d0 <_Z16SystemInitializev+0x36c>)
 800092a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800092e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000930:	4b27      	ldr	r3, [pc, #156]	@ (80009d0 <_Z16SystemInitializev+0x36c>)
 8000932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000934:	f403 7200 	and.w	r2, r3, #512	@ 0x200
 8000938:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800093c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000946:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800094a:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800094c:	4b20      	ldr	r3, [pc, #128]	@ (80009d0 <_Z16SystemInitializev+0x36c>)
 800094e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000950:	4a1f      	ldr	r2, [pc, #124]	@ (80009d0 <_Z16SystemInitializev+0x36c>)
 8000952:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000956:	6313      	str	r3, [r2, #48]	@ 0x30
 8000958:	4b1d      	ldr	r3, [pc, #116]	@ (80009d0 <_Z16SystemInitializev+0x36c>)
 800095a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095c:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8000960:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000964:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800096e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000972:	681b      	ldr	r3, [r3, #0]

  //-----------------
  //Enable DMA Clocks
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000974:	4b16      	ldr	r3, [pc, #88]	@ (80009d0 <_Z16SystemInitializev+0x36c>)
 8000976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000978:	4a15      	ldr	r2, [pc, #84]	@ (80009d0 <_Z16SystemInitializev+0x36c>)
 800097a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800097e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000980:	4b13      	ldr	r3, [pc, #76]	@ (80009d0 <_Z16SystemInitializev+0x36c>)
 8000982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000984:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8000988:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800098c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000996:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800099a:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800099c:	4b0c      	ldr	r3, [pc, #48]	@ (80009d0 <_Z16SystemInitializev+0x36c>)
 800099e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a0:	4a0b      	ldr	r2, [pc, #44]	@ (80009d0 <_Z16SystemInitializev+0x36c>)
 80009a2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80009a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a8:	4b09      	ldr	r3, [pc, #36]	@ (80009d0 <_Z16SystemInitializev+0x36c>)
 80009aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80009b0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80009b4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80009be:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80009c2:	681b      	ldr	r3, [r3, #0]

  //Return
  return OK;
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40023800 	.word	0x40023800

080009d4 <NMI_Handler>:
//includes
#include "handler.hpp"
#include "stm32f7xx_hal.h"


void  NMI_Handler(void) {
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
	while(1)	{}
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <NMI_Handler+0x4>

080009dc <HardFault_Handler>:
}

void  HardFault_Handler(void) {
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
	while(1)	{}
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <HardFault_Handler+0x4>

080009e4 <MemManage_Handler>:
}

void  MemManage_Handler(void) {
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0

}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <BusFault_Handler>:

void  BusFault_Handler(void) {
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0
	while(1)	{}
 80009f6:	bf00      	nop
 80009f8:	e7fd      	b.n	80009f6 <BusFault_Handler+0x4>

080009fa <UsageFault_Handler>:
}

void  UsageFault_Handler(void) {
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0
	while(1)	{}
 80009fe:	bf00      	nop
 8000a00:	e7fd      	b.n	80009fe <UsageFault_Handler+0x4>

08000a02 <SVC_Handler>:
}

void  SVC_Handler(void) {
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
//	while(1)	{}
}
 8000a06:	bf00      	nop
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <DebugMon_Handler>:

void  DebugMon_Handler(void) {
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
//	while(1)	{}
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <PendSV_Handler>:

void  PendSV_Handler(void) {
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0
//	while(1)	{}
}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <SysTick_Handler>:

void  SysTick_Handler(void) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000a30:	f000 f8c6 	bl	8000bc0 <HAL_IncTick>
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <_Z8LED_Initv>:
//includes
#include "main.hpp"
#include "boot.hpp"

// GPIO initialization for the LEDs
void LED_Init(void) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
	  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000a3e:	4b16      	ldr	r3, [pc, #88]	@ (8000a98 <_Z8LED_Initv+0x60>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	4a15      	ldr	r2, [pc, #84]	@ (8000a98 <_Z8LED_Initv+0x60>)
 8000a44:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4a:	4b13      	ldr	r3, [pc, #76]	@ (8000a98 <_Z8LED_Initv+0x60>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]

    // Configure Red LED pin
    GPIO_InitStruct.Pin = USERLED_RED_GPIO_PIN;
 8000a64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a68:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(USERLED_RED_GPIO_PORT, &GPIO_InitStruct);
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4808      	ldr	r0, [pc, #32]	@ (8000a9c <_Z8LED_Initv+0x64>)
 8000a7c:	f000 f9ca 	bl	8000e14 <HAL_GPIO_Init>

    // Configure Green LED pin
    GPIO_InitStruct.Pin = USERLED_GREEN_GPIO_PIN;
 8000a80:	2320      	movs	r3, #32
 8000a82:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(USERLED_GREEN_GPIO_PORT, &GPIO_InitStruct);
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	4619      	mov	r1, r3
 8000a88:	4804      	ldr	r0, [pc, #16]	@ (8000a9c <_Z8LED_Initv+0x64>)
 8000a8a:	f000 f9c3 	bl	8000e14 <HAL_GPIO_Init>
}
 8000a8e:	bf00      	nop
 8000a90:	3718      	adds	r7, #24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40022400 	.word	0x40022400

08000aa0 <_Z10Red_LED_Onv>:
void Toggle_Green_LED(void) {
    HAL_GPIO_TogglePin( USERLED_GREEN_GPIO_PORT, USERLED_GREEN_GPIO_PIN);
}

// Turn Red LED On
void Red_LED_On(void) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(USERLED_RED_GPIO_PORT, USERLED_RED_GPIO_PIN, GPIO_PIN_SET);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aaa:	4802      	ldr	r0, [pc, #8]	@ (8000ab4 <_Z10Red_LED_Onv+0x14>)
 8000aac:	f000 fb5e 	bl	800116c <HAL_GPIO_WritePin>
}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40022400 	.word	0x40022400

08000ab8 <_Z11Red_LED_Offv>:

// Turn Red LED Off
void Red_LED_Off(void) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(USERLED_RED_GPIO_PORT, USERLED_RED_GPIO_PIN, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ac2:	4802      	ldr	r0, [pc, #8]	@ (8000acc <_Z11Red_LED_Offv+0x14>)
 8000ac4:	f000 fb52 	bl	800116c <HAL_GPIO_WritePin>
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40022400 	.word	0x40022400

08000ad0 <_Z12Green_LED_Onv>:

// Turn Green LED On
void Green_LED_On(void) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(USERLED_GREEN_GPIO_PORT, USERLED_GREEN_GPIO_PIN, GPIO_PIN_SET);
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	2120      	movs	r1, #32
 8000ad8:	4802      	ldr	r0, [pc, #8]	@ (8000ae4 <_Z12Green_LED_Onv+0x14>)
 8000ada:	f000 fb47 	bl	800116c <HAL_GPIO_WritePin>
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40022400 	.word	0x40022400

08000ae8 <_Z13Green_LED_Offv>:

// Turn Green LED Off
void Green_LED_Off(void) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(USERLED_GREEN_GPIO_PORT, USERLED_GREEN_GPIO_PIN, GPIO_PIN_RESET);
 8000aec:	2200      	movs	r2, #0
 8000aee:	2120      	movs	r1, #32
 8000af0:	4802      	ldr	r0, [pc, #8]	@ (8000afc <_Z13Green_LED_Offv+0x14>)
 8000af2:	f000 fb3b 	bl	800116c <HAL_GPIO_WritePin>
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40022400 	.word	0x40022400

08000b00 <main>:


//main
//App entry point
int main(void) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0

	if (SystemInitialize() == Fail)	{
 8000b04:	f7ff fdae 	bl	8000664 <_Z16SystemInitializev>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	bf0c      	ite	eq
 8000b0e:	2301      	moveq	r3, #1
 8000b10:	2300      	movne	r3, #0
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <main+0x1c>
//		HAL_Delay(500); // Delay 500 ms
//		Green_LED_Off();
//		HAL_Delay(500); // Delay 500 ms
//		Red_LED_Off();
//	    Green_LED_On();
		while (1)	{}
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <main+0x18>
	}

	LED_Init();
 8000b1c:	f7ff ff8c 	bl	8000a38 <_Z8LED_Initv>
//
//        Toggle_Green_LED();
//        HAL_Delay(500); // Delay 500 ms

		 // Turn Red LED On, Green LED Off
		        Red_LED_On();
 8000b20:	f7ff ffbe 	bl	8000aa0 <_Z10Red_LED_Onv>
		        Green_LED_Off();
 8000b24:	f7ff ffe0 	bl	8000ae8 <_Z13Green_LED_Offv>
		        HAL_Delay(500); // Delay 500 ms
 8000b28:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b2c:	f000 f868 	bl	8000c00 <HAL_Delay>
		        // Turn Red LED Off, Green LED On
		        Red_LED_Off();
 8000b30:	f7ff ffc2 	bl	8000ab8 <_Z11Red_LED_Offv>
		        Green_LED_On();
 8000b34:	f7ff ffcc 	bl	8000ad0 <_Z12Green_LED_Onv>
		        Red_LED_On();
 8000b38:	bf00      	nop
 8000b3a:	e7f1      	b.n	8000b20 <main+0x20>

08000b3c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b40:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <SystemInit+0x20>)
 8000b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b46:	4a05      	ldr	r2, [pc, #20]	@ (8000b5c <SystemInit+0x20>)
 8000b48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b68:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <HAL_InitTick+0x54>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <HAL_InitTick+0x58>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	4619      	mov	r1, r3
 8000b72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 f93b 	bl	8000dfa <HAL_SYSTICK_Config>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e00e      	b.n	8000bac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2b0f      	cmp	r3, #15
 8000b92:	d80a      	bhi.n	8000baa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b94:	2200      	movs	r2, #0
 8000b96:	6879      	ldr	r1, [r7, #4]
 8000b98:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9c:	f000 f911 	bl	8000dc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ba0:	4a06      	ldr	r2, [pc, #24]	@ (8000bbc <HAL_InitTick+0x5c>)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	e000      	b.n	8000bac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000000 	.word	0x20000000
 8000bb8:	20000008 	.word	0x20000008
 8000bbc:	20000004 	.word	0x20000004

08000bc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	@ (8000be0 <HAL_IncTick+0x20>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	461a      	mov	r2, r3
 8000bca:	4b06      	ldr	r3, [pc, #24]	@ (8000be4 <HAL_IncTick+0x24>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4413      	add	r3, r2
 8000bd0:	4a04      	ldr	r2, [pc, #16]	@ (8000be4 <HAL_IncTick+0x24>)
 8000bd2:	6013      	str	r3, [r2, #0]
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	20000008 	.word	0x20000008
 8000be4:	20000028 	.word	0x20000028

08000be8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return uwTick;
 8000bec:	4b03      	ldr	r3, [pc, #12]	@ (8000bfc <HAL_GetTick+0x14>)
 8000bee:	681b      	ldr	r3, [r3, #0]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	20000028 	.word	0x20000028

08000c00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c08:	f7ff ffee 	bl	8000be8 <HAL_GetTick>
 8000c0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c18:	d005      	beq.n	8000c26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c44 <HAL_Delay+0x44>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	461a      	mov	r2, r3
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	4413      	add	r3, r2
 8000c24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c26:	bf00      	nop
 8000c28:	f7ff ffde 	bl	8000be8 <HAL_GetTick>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d8f7      	bhi.n	8000c28 <HAL_Delay+0x28>
  {
  }
}
 8000c38:	bf00      	nop
 8000c3a:	bf00      	nop
 8000c3c:	3710      	adds	r7, #16
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000008 	.word	0x20000008

08000c48 <__NVIC_SetPriorityGrouping>:
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f003 0307 	and.w	r3, r3, #7
 8000c56:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c58:	4b0b      	ldr	r3, [pc, #44]	@ (8000c88 <__NVIC_SetPriorityGrouping+0x40>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c5e:	68ba      	ldr	r2, [r7, #8]
 8000c60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c64:	4013      	ands	r3, r2
 8000c66:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c70:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <__NVIC_SetPriorityGrouping+0x44>)
 8000c72:	4313      	orrs	r3, r2
 8000c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c76:	4a04      	ldr	r2, [pc, #16]	@ (8000c88 <__NVIC_SetPriorityGrouping+0x40>)
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	60d3      	str	r3, [r2, #12]
}
 8000c7c:	bf00      	nop
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00
 8000c8c:	05fa0000 	.word	0x05fa0000

08000c90 <__NVIC_GetPriorityGrouping>:
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c94:	4b04      	ldr	r3, [pc, #16]	@ (8000ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	0a1b      	lsrs	r3, r3, #8
 8000c9a:	f003 0307 	and.w	r3, r3, #7
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <__NVIC_SetPriority>:
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	6039      	str	r1, [r7, #0]
 8000cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	db0a      	blt.n	8000cd6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	490c      	ldr	r1, [pc, #48]	@ (8000cf8 <__NVIC_SetPriority+0x4c>)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	0112      	lsls	r2, r2, #4
 8000ccc:	b2d2      	uxtb	r2, r2
 8000cce:	440b      	add	r3, r1
 8000cd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000cd4:	e00a      	b.n	8000cec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4908      	ldr	r1, [pc, #32]	@ (8000cfc <__NVIC_SetPriority+0x50>)
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	f003 030f 	and.w	r3, r3, #15
 8000ce2:	3b04      	subs	r3, #4
 8000ce4:	0112      	lsls	r2, r2, #4
 8000ce6:	b2d2      	uxtb	r2, r2
 8000ce8:	440b      	add	r3, r1
 8000cea:	761a      	strb	r2, [r3, #24]
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000e100 	.word	0xe000e100
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <NVIC_EncodePriority>:
{
 8000d00:	b480      	push	{r7}
 8000d02:	b089      	sub	sp, #36	@ 0x24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	f1c3 0307 	rsb	r3, r3, #7
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	bf28      	it	cs
 8000d1e:	2304      	movcs	r3, #4
 8000d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3304      	adds	r3, #4
 8000d26:	2b06      	cmp	r3, #6
 8000d28:	d902      	bls.n	8000d30 <NVIC_EncodePriority+0x30>
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3b03      	subs	r3, #3
 8000d2e:	e000      	b.n	8000d32 <NVIC_EncodePriority+0x32>
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	f04f 32ff 	mov.w	r2, #4294967295
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43da      	mvns	r2, r3
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	401a      	ands	r2, r3
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d48:	f04f 31ff 	mov.w	r1, #4294967295
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d52:	43d9      	mvns	r1, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	4313      	orrs	r3, r2
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3724      	adds	r7, #36	@ 0x24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
	...

08000d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d78:	d301      	bcc.n	8000d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e00f      	b.n	8000d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000da8 <SysTick_Config+0x40>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d86:	210f      	movs	r1, #15
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8c:	f7ff ff8e 	bl	8000cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d90:	4b05      	ldr	r3, [pc, #20]	@ (8000da8 <SysTick_Config+0x40>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d96:	4b04      	ldr	r3, [pc, #16]	@ (8000da8 <SysTick_Config+0x40>)
 8000d98:	2207      	movs	r2, #7
 8000d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	e000e010 	.word	0xe000e010

08000dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f7ff ff47 	bl	8000c48 <__NVIC_SetPriorityGrouping>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b086      	sub	sp, #24
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	4603      	mov	r3, r0
 8000dca:	60b9      	str	r1, [r7, #8]
 8000dcc:	607a      	str	r2, [r7, #4]
 8000dce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd4:	f7ff ff5c 	bl	8000c90 <__NVIC_GetPriorityGrouping>
 8000dd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	68b9      	ldr	r1, [r7, #8]
 8000dde:	6978      	ldr	r0, [r7, #20]
 8000de0:	f7ff ff8e 	bl	8000d00 <NVIC_EncodePriority>
 8000de4:	4602      	mov	r2, r0
 8000de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dea:	4611      	mov	r1, r2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff5d 	bl	8000cac <__NVIC_SetPriority>
}
 8000df2:	bf00      	nop
 8000df4:	3718      	adds	r7, #24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff ffb0 	bl	8000d68 <SysTick_Config>
 8000e08:	4603      	mov	r3, r0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	@ 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
 8000e32:	e175      	b.n	8001120 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000e34:	2201      	movs	r2, #1
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	697a      	ldr	r2, [r7, #20]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	f040 8164 	bne.w	800111a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f003 0303 	and.w	r3, r3, #3
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d005      	beq.n	8000e6a <HAL_GPIO_Init+0x56>
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f003 0303 	and.w	r3, r3, #3
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d130      	bne.n	8000ecc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	2203      	movs	r2, #3
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	68da      	ldr	r2, [r3, #12]
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	091b      	lsrs	r3, r3, #4
 8000eb6:	f003 0201 	and.w	r2, r3, #1
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 0303 	and.w	r3, r3, #3
 8000ed4:	2b03      	cmp	r3, #3
 8000ed6:	d017      	beq.n	8000f08 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	2203      	movs	r2, #3
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4013      	ands	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	689a      	ldr	r2, [r3, #8]
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0303 	and.w	r3, r3, #3
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d123      	bne.n	8000f5c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	08da      	lsrs	r2, r3, #3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3208      	adds	r2, #8
 8000f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	f003 0307 	and.w	r3, r3, #7
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	220f      	movs	r2, #15
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	691a      	ldr	r2, [r3, #16]
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	08da      	lsrs	r2, r3, #3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3208      	adds	r2, #8
 8000f56:	69b9      	ldr	r1, [r7, #24]
 8000f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	2203      	movs	r2, #3
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 0203 	and.w	r2, r3, #3
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	f000 80be 	beq.w	800111a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9e:	4b66      	ldr	r3, [pc, #408]	@ (8001138 <HAL_GPIO_Init+0x324>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa2:	4a65      	ldr	r2, [pc, #404]	@ (8001138 <HAL_GPIO_Init+0x324>)
 8000fa4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000faa:	4b63      	ldr	r3, [pc, #396]	@ (8001138 <HAL_GPIO_Init+0x324>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000fb6:	4a61      	ldr	r2, [pc, #388]	@ (800113c <HAL_GPIO_Init+0x328>)
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	089b      	lsrs	r3, r3, #2
 8000fbc:	3302      	adds	r3, #2
 8000fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f003 0303 	and.w	r3, r3, #3
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	220f      	movs	r2, #15
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a58      	ldr	r2, [pc, #352]	@ (8001140 <HAL_GPIO_Init+0x32c>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d037      	beq.n	8001052 <HAL_GPIO_Init+0x23e>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a57      	ldr	r2, [pc, #348]	@ (8001144 <HAL_GPIO_Init+0x330>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d031      	beq.n	800104e <HAL_GPIO_Init+0x23a>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a56      	ldr	r2, [pc, #344]	@ (8001148 <HAL_GPIO_Init+0x334>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d02b      	beq.n	800104a <HAL_GPIO_Init+0x236>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a55      	ldr	r2, [pc, #340]	@ (800114c <HAL_GPIO_Init+0x338>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d025      	beq.n	8001046 <HAL_GPIO_Init+0x232>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a54      	ldr	r2, [pc, #336]	@ (8001150 <HAL_GPIO_Init+0x33c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d01f      	beq.n	8001042 <HAL_GPIO_Init+0x22e>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a53      	ldr	r2, [pc, #332]	@ (8001154 <HAL_GPIO_Init+0x340>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d019      	beq.n	800103e <HAL_GPIO_Init+0x22a>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a52      	ldr	r2, [pc, #328]	@ (8001158 <HAL_GPIO_Init+0x344>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d013      	beq.n	800103a <HAL_GPIO_Init+0x226>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a51      	ldr	r2, [pc, #324]	@ (800115c <HAL_GPIO_Init+0x348>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d00d      	beq.n	8001036 <HAL_GPIO_Init+0x222>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a50      	ldr	r2, [pc, #320]	@ (8001160 <HAL_GPIO_Init+0x34c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d007      	beq.n	8001032 <HAL_GPIO_Init+0x21e>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a4f      	ldr	r2, [pc, #316]	@ (8001164 <HAL_GPIO_Init+0x350>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d101      	bne.n	800102e <HAL_GPIO_Init+0x21a>
 800102a:	2309      	movs	r3, #9
 800102c:	e012      	b.n	8001054 <HAL_GPIO_Init+0x240>
 800102e:	230a      	movs	r3, #10
 8001030:	e010      	b.n	8001054 <HAL_GPIO_Init+0x240>
 8001032:	2308      	movs	r3, #8
 8001034:	e00e      	b.n	8001054 <HAL_GPIO_Init+0x240>
 8001036:	2307      	movs	r3, #7
 8001038:	e00c      	b.n	8001054 <HAL_GPIO_Init+0x240>
 800103a:	2306      	movs	r3, #6
 800103c:	e00a      	b.n	8001054 <HAL_GPIO_Init+0x240>
 800103e:	2305      	movs	r3, #5
 8001040:	e008      	b.n	8001054 <HAL_GPIO_Init+0x240>
 8001042:	2304      	movs	r3, #4
 8001044:	e006      	b.n	8001054 <HAL_GPIO_Init+0x240>
 8001046:	2303      	movs	r3, #3
 8001048:	e004      	b.n	8001054 <HAL_GPIO_Init+0x240>
 800104a:	2302      	movs	r3, #2
 800104c:	e002      	b.n	8001054 <HAL_GPIO_Init+0x240>
 800104e:	2301      	movs	r3, #1
 8001050:	e000      	b.n	8001054 <HAL_GPIO_Init+0x240>
 8001052:	2300      	movs	r3, #0
 8001054:	69fa      	ldr	r2, [r7, #28]
 8001056:	f002 0203 	and.w	r2, r2, #3
 800105a:	0092      	lsls	r2, r2, #2
 800105c:	4093      	lsls	r3, r2
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4313      	orrs	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001064:	4935      	ldr	r1, [pc, #212]	@ (800113c <HAL_GPIO_Init+0x328>)
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	089b      	lsrs	r3, r3, #2
 800106a:	3302      	adds	r3, #2
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001072:	4b3d      	ldr	r3, [pc, #244]	@ (8001168 <HAL_GPIO_Init+0x354>)
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	43db      	mvns	r3, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4013      	ands	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001096:	4a34      	ldr	r2, [pc, #208]	@ (8001168 <HAL_GPIO_Init+0x354>)
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800109c:	4b32      	ldr	r3, [pc, #200]	@ (8001168 <HAL_GPIO_Init+0x354>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d003      	beq.n	80010c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010c0:	4a29      	ldr	r2, [pc, #164]	@ (8001168 <HAL_GPIO_Init+0x354>)
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010c6:	4b28      	ldr	r3, [pc, #160]	@ (8001168 <HAL_GPIO_Init+0x354>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010ea:	4a1f      	ldr	r2, [pc, #124]	@ (8001168 <HAL_GPIO_Init+0x354>)
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001168 <HAL_GPIO_Init+0x354>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d003      	beq.n	8001114 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001114:	4a14      	ldr	r2, [pc, #80]	@ (8001168 <HAL_GPIO_Init+0x354>)
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	3301      	adds	r3, #1
 800111e:	61fb      	str	r3, [r7, #28]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	2b0f      	cmp	r3, #15
 8001124:	f67f ae86 	bls.w	8000e34 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001128:	bf00      	nop
 800112a:	bf00      	nop
 800112c:	3724      	adds	r7, #36	@ 0x24
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800
 800113c:	40013800 	.word	0x40013800
 8001140:	40020000 	.word	0x40020000
 8001144:	40020400 	.word	0x40020400
 8001148:	40020800 	.word	0x40020800
 800114c:	40020c00 	.word	0x40020c00
 8001150:	40021000 	.word	0x40021000
 8001154:	40021400 	.word	0x40021400
 8001158:	40021800 	.word	0x40021800
 800115c:	40021c00 	.word	0x40021c00
 8001160:	40022000 	.word	0x40022000
 8001164:	40022400 	.word	0x40022400
 8001168:	40013c00 	.word	0x40013c00

0800116c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	807b      	strh	r3, [r7, #2]
 8001178:	4613      	mov	r3, r2
 800117a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800117c:	787b      	ldrb	r3, [r7, #1]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001182:	887a      	ldrh	r2, [r7, #2]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001188:	e003      	b.n	8001192 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800118a:	887b      	ldrh	r3, [r7, #2]
 800118c:	041a      	lsls	r2, r3, #16
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	619a      	str	r2, [r3, #24]
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
	...

080011a0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011a4:	4b05      	ldr	r3, [pc, #20]	@ (80011bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a04      	ldr	r2, [pc, #16]	@ (80011bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80011aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011ae:	6013      	str	r3, [r2, #0]
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	40007000 	.word	0x40007000

080011c0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80011ca:	4b23      	ldr	r3, [pc, #140]	@ (8001258 <HAL_PWREx_EnableOverDrive+0x98>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ce:	4a22      	ldr	r2, [pc, #136]	@ (8001258 <HAL_PWREx_EnableOverDrive+0x98>)
 80011d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011d6:	4b20      	ldr	r3, [pc, #128]	@ (8001258 <HAL_PWREx_EnableOverDrive+0x98>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80011e2:	4b1e      	ldr	r3, [pc, #120]	@ (800125c <HAL_PWREx_EnableOverDrive+0x9c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a1d      	ldr	r2, [pc, #116]	@ (800125c <HAL_PWREx_EnableOverDrive+0x9c>)
 80011e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011ec:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011ee:	f7ff fcfb 	bl	8000be8 <HAL_GetTick>
 80011f2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011f4:	e009      	b.n	800120a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80011f6:	f7ff fcf7 	bl	8000be8 <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001204:	d901      	bls.n	800120a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e022      	b.n	8001250 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800120a:	4b14      	ldr	r3, [pc, #80]	@ (800125c <HAL_PWREx_EnableOverDrive+0x9c>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001212:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001216:	d1ee      	bne.n	80011f6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001218:	4b10      	ldr	r3, [pc, #64]	@ (800125c <HAL_PWREx_EnableOverDrive+0x9c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a0f      	ldr	r2, [pc, #60]	@ (800125c <HAL_PWREx_EnableOverDrive+0x9c>)
 800121e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001222:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001224:	f7ff fce0 	bl	8000be8 <HAL_GetTick>
 8001228:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800122a:	e009      	b.n	8001240 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800122c:	f7ff fcdc 	bl	8000be8 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800123a:	d901      	bls.n	8001240 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e007      	b.n	8001250 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001240:	4b06      	ldr	r3, [pc, #24]	@ (800125c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001248:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800124c:	d1ee      	bne.n	800122c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40023800 	.word	0x40023800
 800125c:	40007000 	.word	0x40007000

08001260 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001268:	2300      	movs	r3, #0
 800126a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d101      	bne.n	8001276 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e29b      	b.n	80017ae <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 8087 	beq.w	8001392 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001284:	4b96      	ldr	r3, [pc, #600]	@ (80014e0 <HAL_RCC_OscConfig+0x280>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f003 030c 	and.w	r3, r3, #12
 800128c:	2b04      	cmp	r3, #4
 800128e:	d00c      	beq.n	80012aa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001290:	4b93      	ldr	r3, [pc, #588]	@ (80014e0 <HAL_RCC_OscConfig+0x280>)
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f003 030c 	and.w	r3, r3, #12
 8001298:	2b08      	cmp	r3, #8
 800129a:	d112      	bne.n	80012c2 <HAL_RCC_OscConfig+0x62>
 800129c:	4b90      	ldr	r3, [pc, #576]	@ (80014e0 <HAL_RCC_OscConfig+0x280>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012a8:	d10b      	bne.n	80012c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012aa:	4b8d      	ldr	r3, [pc, #564]	@ (80014e0 <HAL_RCC_OscConfig+0x280>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d06c      	beq.n	8001390 <HAL_RCC_OscConfig+0x130>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d168      	bne.n	8001390 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e275      	b.n	80017ae <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012ca:	d106      	bne.n	80012da <HAL_RCC_OscConfig+0x7a>
 80012cc:	4b84      	ldr	r3, [pc, #528]	@ (80014e0 <HAL_RCC_OscConfig+0x280>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a83      	ldr	r2, [pc, #524]	@ (80014e0 <HAL_RCC_OscConfig+0x280>)
 80012d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	e02e      	b.n	8001338 <HAL_RCC_OscConfig+0xd8>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d10c      	bne.n	80012fc <HAL_RCC_OscConfig+0x9c>
 80012e2:	4b7f      	ldr	r3, [pc, #508]	@ (80014e0 <HAL_RCC_OscConfig+0x280>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a7e      	ldr	r2, [pc, #504]	@ (80014e0 <HAL_RCC_OscConfig+0x280>)
 80012e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012ec:	6013      	str	r3, [r2, #0]
 80012ee:	4b7c      	ldr	r3, [pc, #496]	@ (80014e0 <HAL_RCC_OscConfig+0x280>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a7b      	ldr	r2, [pc, #492]	@ (80014e0 <HAL_RCC_OscConfig+0x280>)
 80012f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	e01d      	b.n	8001338 <HAL_RCC_OscConfig+0xd8>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001304:	d10c      	bne.n	8001320 <HAL_RCC_OscConfig+0xc0>
 8001306:	4b76      	ldr	r3, [pc, #472]	@ (80014e0 <HAL_RCC_OscConfig+0x280>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a75      	ldr	r2, [pc, #468]	@ (80014e0 <HAL_RCC_OscConfig+0x280>)
 800130c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	4b73      	ldr	r3, [pc, #460]	@ (80014e0 <HAL_RCC_OscConfig+0x280>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a72      	ldr	r2, [pc, #456]	@ (80014e0 <HAL_RCC_OscConfig+0x280>)
 8001318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	e00b      	b.n	8001338 <HAL_RCC_OscConfig+0xd8>
 8001320:	4b6f      	ldr	r3, [pc, #444]	@ (80014e0 <HAL_RCC_OscConfig+0x280>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a6e      	ldr	r2, [pc, #440]	@ (80014e0 <HAL_RCC_OscConfig+0x280>)
 8001326:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	4b6c      	ldr	r3, [pc, #432]	@ (80014e0 <HAL_RCC_OscConfig+0x280>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a6b      	ldr	r2, [pc, #428]	@ (80014e0 <HAL_RCC_OscConfig+0x280>)
 8001332:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d013      	beq.n	8001368 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001340:	f7ff fc52 	bl	8000be8 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001348:	f7ff fc4e 	bl	8000be8 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b64      	cmp	r3, #100	@ 0x64
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e229      	b.n	80017ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135a:	4b61      	ldr	r3, [pc, #388]	@ (80014e0 <HAL_RCC_OscConfig+0x280>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d0f0      	beq.n	8001348 <HAL_RCC_OscConfig+0xe8>
 8001366:	e014      	b.n	8001392 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001368:	f7ff fc3e 	bl	8000be8 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001370:	f7ff fc3a 	bl	8000be8 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b64      	cmp	r3, #100	@ 0x64
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e215      	b.n	80017ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001382:	4b57      	ldr	r3, [pc, #348]	@ (80014e0 <HAL_RCC_OscConfig+0x280>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1f0      	bne.n	8001370 <HAL_RCC_OscConfig+0x110>
 800138e:	e000      	b.n	8001392 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d069      	beq.n	8001472 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800139e:	4b50      	ldr	r3, [pc, #320]	@ (80014e0 <HAL_RCC_OscConfig+0x280>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f003 030c 	and.w	r3, r3, #12
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d00b      	beq.n	80013c2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013aa:	4b4d      	ldr	r3, [pc, #308]	@ (80014e0 <HAL_RCC_OscConfig+0x280>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f003 030c 	and.w	r3, r3, #12
 80013b2:	2b08      	cmp	r3, #8
 80013b4:	d11c      	bne.n	80013f0 <HAL_RCC_OscConfig+0x190>
 80013b6:	4b4a      	ldr	r3, [pc, #296]	@ (80014e0 <HAL_RCC_OscConfig+0x280>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d116      	bne.n	80013f0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c2:	4b47      	ldr	r3, [pc, #284]	@ (80014e0 <HAL_RCC_OscConfig+0x280>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d005      	beq.n	80013da <HAL_RCC_OscConfig+0x17a>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d001      	beq.n	80013da <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e1e9      	b.n	80017ae <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013da:	4b41      	ldr	r3, [pc, #260]	@ (80014e0 <HAL_RCC_OscConfig+0x280>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	493d      	ldr	r1, [pc, #244]	@ (80014e0 <HAL_RCC_OscConfig+0x280>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ee:	e040      	b.n	8001472 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d023      	beq.n	8001440 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013f8:	4b39      	ldr	r3, [pc, #228]	@ (80014e0 <HAL_RCC_OscConfig+0x280>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a38      	ldr	r2, [pc, #224]	@ (80014e0 <HAL_RCC_OscConfig+0x280>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001404:	f7ff fbf0 	bl	8000be8 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800140c:	f7ff fbec 	bl	8000be8 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e1c7      	b.n	80017ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800141e:	4b30      	ldr	r3, [pc, #192]	@ (80014e0 <HAL_RCC_OscConfig+0x280>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f0      	beq.n	800140c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800142a:	4b2d      	ldr	r3, [pc, #180]	@ (80014e0 <HAL_RCC_OscConfig+0x280>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	4929      	ldr	r1, [pc, #164]	@ (80014e0 <HAL_RCC_OscConfig+0x280>)
 800143a:	4313      	orrs	r3, r2
 800143c:	600b      	str	r3, [r1, #0]
 800143e:	e018      	b.n	8001472 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001440:	4b27      	ldr	r3, [pc, #156]	@ (80014e0 <HAL_RCC_OscConfig+0x280>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a26      	ldr	r2, [pc, #152]	@ (80014e0 <HAL_RCC_OscConfig+0x280>)
 8001446:	f023 0301 	bic.w	r3, r3, #1
 800144a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144c:	f7ff fbcc 	bl	8000be8 <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001454:	f7ff fbc8 	bl	8000be8 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e1a3      	b.n	80017ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001466:	4b1e      	ldr	r3, [pc, #120]	@ (80014e0 <HAL_RCC_OscConfig+0x280>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1f0      	bne.n	8001454 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0308 	and.w	r3, r3, #8
 800147a:	2b00      	cmp	r3, #0
 800147c:	d038      	beq.n	80014f0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d019      	beq.n	80014ba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001486:	4b16      	ldr	r3, [pc, #88]	@ (80014e0 <HAL_RCC_OscConfig+0x280>)
 8001488:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800148a:	4a15      	ldr	r2, [pc, #84]	@ (80014e0 <HAL_RCC_OscConfig+0x280>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001492:	f7ff fba9 	bl	8000be8 <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800149a:	f7ff fba5 	bl	8000be8 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e180      	b.n	80017ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ac:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <HAL_RCC_OscConfig+0x280>)
 80014ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d0f0      	beq.n	800149a <HAL_RCC_OscConfig+0x23a>
 80014b8:	e01a      	b.n	80014f0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ba:	4b09      	ldr	r3, [pc, #36]	@ (80014e0 <HAL_RCC_OscConfig+0x280>)
 80014bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014be:	4a08      	ldr	r2, [pc, #32]	@ (80014e0 <HAL_RCC_OscConfig+0x280>)
 80014c0:	f023 0301 	bic.w	r3, r3, #1
 80014c4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c6:	f7ff fb8f 	bl	8000be8 <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014cc:	e00a      	b.n	80014e4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ce:	f7ff fb8b 	bl	8000be8 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d903      	bls.n	80014e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e166      	b.n	80017ae <HAL_RCC_OscConfig+0x54e>
 80014e0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e4:	4b92      	ldr	r3, [pc, #584]	@ (8001730 <HAL_RCC_OscConfig+0x4d0>)
 80014e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1ee      	bne.n	80014ce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0304 	and.w	r3, r3, #4
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f000 80a4 	beq.w	8001646 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014fe:	4b8c      	ldr	r3, [pc, #560]	@ (8001730 <HAL_RCC_OscConfig+0x4d0>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10d      	bne.n	8001526 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800150a:	4b89      	ldr	r3, [pc, #548]	@ (8001730 <HAL_RCC_OscConfig+0x4d0>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150e:	4a88      	ldr	r2, [pc, #544]	@ (8001730 <HAL_RCC_OscConfig+0x4d0>)
 8001510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001514:	6413      	str	r3, [r2, #64]	@ 0x40
 8001516:	4b86      	ldr	r3, [pc, #536]	@ (8001730 <HAL_RCC_OscConfig+0x4d0>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001522:	2301      	movs	r3, #1
 8001524:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001526:	4b83      	ldr	r3, [pc, #524]	@ (8001734 <HAL_RCC_OscConfig+0x4d4>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800152e:	2b00      	cmp	r3, #0
 8001530:	d118      	bne.n	8001564 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001532:	4b80      	ldr	r3, [pc, #512]	@ (8001734 <HAL_RCC_OscConfig+0x4d4>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a7f      	ldr	r2, [pc, #508]	@ (8001734 <HAL_RCC_OscConfig+0x4d4>)
 8001538:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800153c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800153e:	f7ff fb53 	bl	8000be8 <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001546:	f7ff fb4f 	bl	8000be8 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b64      	cmp	r3, #100	@ 0x64
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e12a      	b.n	80017ae <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001558:	4b76      	ldr	r3, [pc, #472]	@ (8001734 <HAL_RCC_OscConfig+0x4d4>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0f0      	beq.n	8001546 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d106      	bne.n	800157a <HAL_RCC_OscConfig+0x31a>
 800156c:	4b70      	ldr	r3, [pc, #448]	@ (8001730 <HAL_RCC_OscConfig+0x4d0>)
 800156e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001570:	4a6f      	ldr	r2, [pc, #444]	@ (8001730 <HAL_RCC_OscConfig+0x4d0>)
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	6713      	str	r3, [r2, #112]	@ 0x70
 8001578:	e02d      	b.n	80015d6 <HAL_RCC_OscConfig+0x376>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10c      	bne.n	800159c <HAL_RCC_OscConfig+0x33c>
 8001582:	4b6b      	ldr	r3, [pc, #428]	@ (8001730 <HAL_RCC_OscConfig+0x4d0>)
 8001584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001586:	4a6a      	ldr	r2, [pc, #424]	@ (8001730 <HAL_RCC_OscConfig+0x4d0>)
 8001588:	f023 0301 	bic.w	r3, r3, #1
 800158c:	6713      	str	r3, [r2, #112]	@ 0x70
 800158e:	4b68      	ldr	r3, [pc, #416]	@ (8001730 <HAL_RCC_OscConfig+0x4d0>)
 8001590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001592:	4a67      	ldr	r2, [pc, #412]	@ (8001730 <HAL_RCC_OscConfig+0x4d0>)
 8001594:	f023 0304 	bic.w	r3, r3, #4
 8001598:	6713      	str	r3, [r2, #112]	@ 0x70
 800159a:	e01c      	b.n	80015d6 <HAL_RCC_OscConfig+0x376>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	2b05      	cmp	r3, #5
 80015a2:	d10c      	bne.n	80015be <HAL_RCC_OscConfig+0x35e>
 80015a4:	4b62      	ldr	r3, [pc, #392]	@ (8001730 <HAL_RCC_OscConfig+0x4d0>)
 80015a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015a8:	4a61      	ldr	r2, [pc, #388]	@ (8001730 <HAL_RCC_OscConfig+0x4d0>)
 80015aa:	f043 0304 	orr.w	r3, r3, #4
 80015ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80015b0:	4b5f      	ldr	r3, [pc, #380]	@ (8001730 <HAL_RCC_OscConfig+0x4d0>)
 80015b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015b4:	4a5e      	ldr	r2, [pc, #376]	@ (8001730 <HAL_RCC_OscConfig+0x4d0>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80015bc:	e00b      	b.n	80015d6 <HAL_RCC_OscConfig+0x376>
 80015be:	4b5c      	ldr	r3, [pc, #368]	@ (8001730 <HAL_RCC_OscConfig+0x4d0>)
 80015c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015c2:	4a5b      	ldr	r2, [pc, #364]	@ (8001730 <HAL_RCC_OscConfig+0x4d0>)
 80015c4:	f023 0301 	bic.w	r3, r3, #1
 80015c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80015ca:	4b59      	ldr	r3, [pc, #356]	@ (8001730 <HAL_RCC_OscConfig+0x4d0>)
 80015cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ce:	4a58      	ldr	r2, [pc, #352]	@ (8001730 <HAL_RCC_OscConfig+0x4d0>)
 80015d0:	f023 0304 	bic.w	r3, r3, #4
 80015d4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d015      	beq.n	800160a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015de:	f7ff fb03 	bl	8000be8 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e4:	e00a      	b.n	80015fc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015e6:	f7ff faff 	bl	8000be8 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e0d8      	b.n	80017ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015fc:	4b4c      	ldr	r3, [pc, #304]	@ (8001730 <HAL_RCC_OscConfig+0x4d0>)
 80015fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0ee      	beq.n	80015e6 <HAL_RCC_OscConfig+0x386>
 8001608:	e014      	b.n	8001634 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160a:	f7ff faed 	bl	8000be8 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001610:	e00a      	b.n	8001628 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001612:	f7ff fae9 	bl	8000be8 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001620:	4293      	cmp	r3, r2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e0c2      	b.n	80017ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001628:	4b41      	ldr	r3, [pc, #260]	@ (8001730 <HAL_RCC_OscConfig+0x4d0>)
 800162a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1ee      	bne.n	8001612 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001634:	7dfb      	ldrb	r3, [r7, #23]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d105      	bne.n	8001646 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800163a:	4b3d      	ldr	r3, [pc, #244]	@ (8001730 <HAL_RCC_OscConfig+0x4d0>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	4a3c      	ldr	r2, [pc, #240]	@ (8001730 <HAL_RCC_OscConfig+0x4d0>)
 8001640:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001644:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	2b00      	cmp	r3, #0
 800164c:	f000 80ae 	beq.w	80017ac <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001650:	4b37      	ldr	r3, [pc, #220]	@ (8001730 <HAL_RCC_OscConfig+0x4d0>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f003 030c 	and.w	r3, r3, #12
 8001658:	2b08      	cmp	r3, #8
 800165a:	d06d      	beq.n	8001738 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	2b02      	cmp	r3, #2
 8001662:	d14b      	bne.n	80016fc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001664:	4b32      	ldr	r3, [pc, #200]	@ (8001730 <HAL_RCC_OscConfig+0x4d0>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a31      	ldr	r2, [pc, #196]	@ (8001730 <HAL_RCC_OscConfig+0x4d0>)
 800166a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800166e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001670:	f7ff faba 	bl	8000be8 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001678:	f7ff fab6 	bl	8000be8 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e091      	b.n	80017ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168a:	4b29      	ldr	r3, [pc, #164]	@ (8001730 <HAL_RCC_OscConfig+0x4d0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	69da      	ldr	r2, [r3, #28]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a4:	019b      	lsls	r3, r3, #6
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ac:	085b      	lsrs	r3, r3, #1
 80016ae:	3b01      	subs	r3, #1
 80016b0:	041b      	lsls	r3, r3, #16
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b8:	061b      	lsls	r3, r3, #24
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c0:	071b      	lsls	r3, r3, #28
 80016c2:	491b      	ldr	r1, [pc, #108]	@ (8001730 <HAL_RCC_OscConfig+0x4d0>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016c8:	4b19      	ldr	r3, [pc, #100]	@ (8001730 <HAL_RCC_OscConfig+0x4d0>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a18      	ldr	r2, [pc, #96]	@ (8001730 <HAL_RCC_OscConfig+0x4d0>)
 80016ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d4:	f7ff fa88 	bl	8000be8 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016dc:	f7ff fa84 	bl	8000be8 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e05f      	b.n	80017ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ee:	4b10      	ldr	r3, [pc, #64]	@ (8001730 <HAL_RCC_OscConfig+0x4d0>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f0      	beq.n	80016dc <HAL_RCC_OscConfig+0x47c>
 80016fa:	e057      	b.n	80017ac <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001730 <HAL_RCC_OscConfig+0x4d0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a0b      	ldr	r2, [pc, #44]	@ (8001730 <HAL_RCC_OscConfig+0x4d0>)
 8001702:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001706:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001708:	f7ff fa6e 	bl	8000be8 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001710:	f7ff fa6a 	bl	8000be8 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e045      	b.n	80017ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001722:	4b03      	ldr	r3, [pc, #12]	@ (8001730 <HAL_RCC_OscConfig+0x4d0>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f0      	bne.n	8001710 <HAL_RCC_OscConfig+0x4b0>
 800172e:	e03d      	b.n	80017ac <HAL_RCC_OscConfig+0x54c>
 8001730:	40023800 	.word	0x40023800
 8001734:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001738:	4b1f      	ldr	r3, [pc, #124]	@ (80017b8 <HAL_RCC_OscConfig+0x558>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d030      	beq.n	80017a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001750:	429a      	cmp	r2, r3
 8001752:	d129      	bne.n	80017a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800175e:	429a      	cmp	r2, r3
 8001760:	d122      	bne.n	80017a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001768:	4013      	ands	r3, r2
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800176e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001770:	4293      	cmp	r3, r2
 8001772:	d119      	bne.n	80017a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800177e:	085b      	lsrs	r3, r3, #1
 8001780:	3b01      	subs	r3, #1
 8001782:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001784:	429a      	cmp	r2, r3
 8001786:	d10f      	bne.n	80017a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001792:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001794:	429a      	cmp	r2, r3
 8001796:	d107      	bne.n	80017a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d001      	beq.n	80017ac <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e000      	b.n	80017ae <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800

080017bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d101      	bne.n	80017d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e0d0      	b.n	8001976 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017d4:	4b6a      	ldr	r3, [pc, #424]	@ (8001980 <HAL_RCC_ClockConfig+0x1c4>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 030f 	and.w	r3, r3, #15
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d910      	bls.n	8001804 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e2:	4b67      	ldr	r3, [pc, #412]	@ (8001980 <HAL_RCC_ClockConfig+0x1c4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f023 020f 	bic.w	r2, r3, #15
 80017ea:	4965      	ldr	r1, [pc, #404]	@ (8001980 <HAL_RCC_ClockConfig+0x1c4>)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f2:	4b63      	ldr	r3, [pc, #396]	@ (8001980 <HAL_RCC_ClockConfig+0x1c4>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 030f 	and.w	r3, r3, #15
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d001      	beq.n	8001804 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e0b8      	b.n	8001976 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d020      	beq.n	8001852 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	d005      	beq.n	8001828 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800181c:	4b59      	ldr	r3, [pc, #356]	@ (8001984 <HAL_RCC_ClockConfig+0x1c8>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	4a58      	ldr	r2, [pc, #352]	@ (8001984 <HAL_RCC_ClockConfig+0x1c8>)
 8001822:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001826:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0308 	and.w	r3, r3, #8
 8001830:	2b00      	cmp	r3, #0
 8001832:	d005      	beq.n	8001840 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001834:	4b53      	ldr	r3, [pc, #332]	@ (8001984 <HAL_RCC_ClockConfig+0x1c8>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	4a52      	ldr	r2, [pc, #328]	@ (8001984 <HAL_RCC_ClockConfig+0x1c8>)
 800183a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800183e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001840:	4b50      	ldr	r3, [pc, #320]	@ (8001984 <HAL_RCC_ClockConfig+0x1c8>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	494d      	ldr	r1, [pc, #308]	@ (8001984 <HAL_RCC_ClockConfig+0x1c8>)
 800184e:	4313      	orrs	r3, r2
 8001850:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b00      	cmp	r3, #0
 800185c:	d040      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d107      	bne.n	8001876 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001866:	4b47      	ldr	r3, [pc, #284]	@ (8001984 <HAL_RCC_ClockConfig+0x1c8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d115      	bne.n	800189e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e07f      	b.n	8001976 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d107      	bne.n	800188e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800187e:	4b41      	ldr	r3, [pc, #260]	@ (8001984 <HAL_RCC_ClockConfig+0x1c8>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d109      	bne.n	800189e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e073      	b.n	8001976 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188e:	4b3d      	ldr	r3, [pc, #244]	@ (8001984 <HAL_RCC_ClockConfig+0x1c8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e06b      	b.n	8001976 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800189e:	4b39      	ldr	r3, [pc, #228]	@ (8001984 <HAL_RCC_ClockConfig+0x1c8>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f023 0203 	bic.w	r2, r3, #3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	4936      	ldr	r1, [pc, #216]	@ (8001984 <HAL_RCC_ClockConfig+0x1c8>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018b0:	f7ff f99a 	bl	8000be8 <HAL_GetTick>
 80018b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b6:	e00a      	b.n	80018ce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b8:	f7ff f996 	bl	8000be8 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e053      	b.n	8001976 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001984 <HAL_RCC_ClockConfig+0x1c8>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 020c 	and.w	r2, r3, #12
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	429a      	cmp	r2, r3
 80018de:	d1eb      	bne.n	80018b8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018e0:	4b27      	ldr	r3, [pc, #156]	@ (8001980 <HAL_RCC_ClockConfig+0x1c4>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 030f 	and.w	r3, r3, #15
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d210      	bcs.n	8001910 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ee:	4b24      	ldr	r3, [pc, #144]	@ (8001980 <HAL_RCC_ClockConfig+0x1c4>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f023 020f 	bic.w	r2, r3, #15
 80018f6:	4922      	ldr	r1, [pc, #136]	@ (8001980 <HAL_RCC_ClockConfig+0x1c4>)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fe:	4b20      	ldr	r3, [pc, #128]	@ (8001980 <HAL_RCC_ClockConfig+0x1c4>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	429a      	cmp	r2, r3
 800190a:	d001      	beq.n	8001910 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e032      	b.n	8001976 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	2b00      	cmp	r3, #0
 800191a:	d008      	beq.n	800192e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800191c:	4b19      	ldr	r3, [pc, #100]	@ (8001984 <HAL_RCC_ClockConfig+0x1c8>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	4916      	ldr	r1, [pc, #88]	@ (8001984 <HAL_RCC_ClockConfig+0x1c8>)
 800192a:	4313      	orrs	r3, r2
 800192c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0308 	and.w	r3, r3, #8
 8001936:	2b00      	cmp	r3, #0
 8001938:	d009      	beq.n	800194e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800193a:	4b12      	ldr	r3, [pc, #72]	@ (8001984 <HAL_RCC_ClockConfig+0x1c8>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	490e      	ldr	r1, [pc, #56]	@ (8001984 <HAL_RCC_ClockConfig+0x1c8>)
 800194a:	4313      	orrs	r3, r2
 800194c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800194e:	f000 f821 	bl	8001994 <HAL_RCC_GetSysClockFreq>
 8001952:	4602      	mov	r2, r0
 8001954:	4b0b      	ldr	r3, [pc, #44]	@ (8001984 <HAL_RCC_ClockConfig+0x1c8>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	091b      	lsrs	r3, r3, #4
 800195a:	f003 030f 	and.w	r3, r3, #15
 800195e:	490a      	ldr	r1, [pc, #40]	@ (8001988 <HAL_RCC_ClockConfig+0x1cc>)
 8001960:	5ccb      	ldrb	r3, [r1, r3]
 8001962:	fa22 f303 	lsr.w	r3, r2, r3
 8001966:	4a09      	ldr	r2, [pc, #36]	@ (800198c <HAL_RCC_ClockConfig+0x1d0>)
 8001968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800196a:	4b09      	ldr	r3, [pc, #36]	@ (8001990 <HAL_RCC_ClockConfig+0x1d4>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff f8f6 	bl	8000b60 <HAL_InitTick>

  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40023c00 	.word	0x40023c00
 8001984:	40023800 	.word	0x40023800
 8001988:	080023e0 	.word	0x080023e0
 800198c:	20000000 	.word	0x20000000
 8001990:	20000004 	.word	0x20000004

08001994 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001994:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001998:	b090      	sub	sp, #64	@ 0x40
 800199a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800199c:	2300      	movs	r3, #0
 800199e:	637b      	str	r3, [r7, #52]	@ 0x34
 80019a0:	2300      	movs	r3, #0
 80019a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80019a4:	2300      	movs	r3, #0
 80019a6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019ac:	4b59      	ldr	r3, [pc, #356]	@ (8001b14 <HAL_RCC_GetSysClockFreq+0x180>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 030c 	and.w	r3, r3, #12
 80019b4:	2b08      	cmp	r3, #8
 80019b6:	d00d      	beq.n	80019d4 <HAL_RCC_GetSysClockFreq+0x40>
 80019b8:	2b08      	cmp	r3, #8
 80019ba:	f200 80a1 	bhi.w	8001b00 <HAL_RCC_GetSysClockFreq+0x16c>
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d002      	beq.n	80019c8 <HAL_RCC_GetSysClockFreq+0x34>
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	d003      	beq.n	80019ce <HAL_RCC_GetSysClockFreq+0x3a>
 80019c6:	e09b      	b.n	8001b00 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019c8:	4b53      	ldr	r3, [pc, #332]	@ (8001b18 <HAL_RCC_GetSysClockFreq+0x184>)
 80019ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80019cc:	e09b      	b.n	8001b06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019ce:	4b53      	ldr	r3, [pc, #332]	@ (8001b1c <HAL_RCC_GetSysClockFreq+0x188>)
 80019d0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80019d2:	e098      	b.n	8001b06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019d4:	4b4f      	ldr	r3, [pc, #316]	@ (8001b14 <HAL_RCC_GetSysClockFreq+0x180>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019dc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80019de:	4b4d      	ldr	r3, [pc, #308]	@ (8001b14 <HAL_RCC_GetSysClockFreq+0x180>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d028      	beq.n	8001a3c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ea:	4b4a      	ldr	r3, [pc, #296]	@ (8001b14 <HAL_RCC_GetSysClockFreq+0x180>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	099b      	lsrs	r3, r3, #6
 80019f0:	2200      	movs	r2, #0
 80019f2:	623b      	str	r3, [r7, #32]
 80019f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80019f6:	6a3b      	ldr	r3, [r7, #32]
 80019f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80019fc:	2100      	movs	r1, #0
 80019fe:	4b47      	ldr	r3, [pc, #284]	@ (8001b1c <HAL_RCC_GetSysClockFreq+0x188>)
 8001a00:	fb03 f201 	mul.w	r2, r3, r1
 8001a04:	2300      	movs	r3, #0
 8001a06:	fb00 f303 	mul.w	r3, r0, r3
 8001a0a:	4413      	add	r3, r2
 8001a0c:	4a43      	ldr	r2, [pc, #268]	@ (8001b1c <HAL_RCC_GetSysClockFreq+0x188>)
 8001a0e:	fba0 1202 	umull	r1, r2, r0, r2
 8001a12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a14:	460a      	mov	r2, r1
 8001a16:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001a18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a1a:	4413      	add	r3, r2
 8001a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a20:	2200      	movs	r2, #0
 8001a22:	61bb      	str	r3, [r7, #24]
 8001a24:	61fa      	str	r2, [r7, #28]
 8001a26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001a2e:	f7fe fc03 	bl	8000238 <__aeabi_uldivmod>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4613      	mov	r3, r2
 8001a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a3a:	e053      	b.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a3c:	4b35      	ldr	r3, [pc, #212]	@ (8001b14 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	099b      	lsrs	r3, r3, #6
 8001a42:	2200      	movs	r2, #0
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	617a      	str	r2, [r7, #20]
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001a4e:	f04f 0b00 	mov.w	fp, #0
 8001a52:	4652      	mov	r2, sl
 8001a54:	465b      	mov	r3, fp
 8001a56:	f04f 0000 	mov.w	r0, #0
 8001a5a:	f04f 0100 	mov.w	r1, #0
 8001a5e:	0159      	lsls	r1, r3, #5
 8001a60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a64:	0150      	lsls	r0, r2, #5
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	ebb2 080a 	subs.w	r8, r2, sl
 8001a6e:	eb63 090b 	sbc.w	r9, r3, fp
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a7e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a82:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001a86:	ebb2 0408 	subs.w	r4, r2, r8
 8001a8a:	eb63 0509 	sbc.w	r5, r3, r9
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	f04f 0300 	mov.w	r3, #0
 8001a96:	00eb      	lsls	r3, r5, #3
 8001a98:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a9c:	00e2      	lsls	r2, r4, #3
 8001a9e:	4614      	mov	r4, r2
 8001aa0:	461d      	mov	r5, r3
 8001aa2:	eb14 030a 	adds.w	r3, r4, sl
 8001aa6:	603b      	str	r3, [r7, #0]
 8001aa8:	eb45 030b 	adc.w	r3, r5, fp
 8001aac:	607b      	str	r3, [r7, #4]
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001aba:	4629      	mov	r1, r5
 8001abc:	028b      	lsls	r3, r1, #10
 8001abe:	4621      	mov	r1, r4
 8001ac0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ac4:	4621      	mov	r1, r4
 8001ac6:	028a      	lsls	r2, r1, #10
 8001ac8:	4610      	mov	r0, r2
 8001aca:	4619      	mov	r1, r3
 8001acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ace:	2200      	movs	r2, #0
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	60fa      	str	r2, [r7, #12]
 8001ad4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ad8:	f7fe fbae 	bl	8000238 <__aeabi_uldivmod>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8001b14 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	0c1b      	lsrs	r3, r3, #16
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	3301      	adds	r3, #1
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001af4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001afe:	e002      	b.n	8001b06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b00:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b02:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3740      	adds	r7, #64	@ 0x40
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800
 8001b18:	00f42400 	.word	0x00f42400
 8001b1c:	017d7840 	.word	0x017d7840

08001b20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b088      	sub	sp, #32
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d012      	beq.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001b48:	4b69      	ldr	r3, [pc, #420]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	4a68      	ldr	r2, [pc, #416]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b4e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001b52:	6093      	str	r3, [r2, #8]
 8001b54:	4b66      	ldr	r3, [pc, #408]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b5c:	4964      	ldr	r1, [pc, #400]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d017      	beq.n	8001baa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b7a:	4b5d      	ldr	r3, [pc, #372]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b80:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b88:	4959      	ldr	r1, [pc, #356]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001b98:	d101      	bne.n	8001b9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d017      	beq.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001bb6:	4b4e      	ldr	r3, [pc, #312]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bbc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc4:	494a      	ldr	r1, [pc, #296]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001bd4:	d101      	bne.n	8001bda <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001be2:	2301      	movs	r3, #1
 8001be4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0320 	and.w	r3, r3, #32
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 808b 	beq.w	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c04:	4b3a      	ldr	r3, [pc, #232]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c08:	4a39      	ldr	r2, [pc, #228]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c10:	4b37      	ldr	r3, [pc, #220]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001c1c:	4b35      	ldr	r3, [pc, #212]	@ (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a34      	ldr	r2, [pc, #208]	@ (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c28:	f7fe ffde 	bl	8000be8 <HAL_GetTick>
 8001c2c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c30:	f7fe ffda 	bl	8000be8 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b64      	cmp	r3, #100	@ 0x64
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e38f      	b.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001c42:	4b2c      	ldr	r3, [pc, #176]	@ (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c4e:	4b28      	ldr	r3, [pc, #160]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c56:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d035      	beq.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d02e      	beq.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c6c:	4b20      	ldr	r3, [pc, #128]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c74:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c76:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c7a:	4a1d      	ldr	r2, [pc, #116]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c80:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c82:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c86:	4a1a      	ldr	r2, [pc, #104]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c8c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001c8e:	4a18      	ldr	r2, [pc, #96]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001c94:	4b16      	ldr	r3, [pc, #88]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d114      	bne.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca0:	f7fe ffa2 	bl	8000be8 <HAL_GetTick>
 8001ca4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca6:	e00a      	b.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ca8:	f7fe ff9e 	bl	8000be8 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e351      	b.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0ee      	beq.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001cd6:	d111      	bne.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001cd8:	4b05      	ldr	r3, [pc, #20]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ce4:	4b04      	ldr	r3, [pc, #16]	@ (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001ce6:	400b      	ands	r3, r1
 8001ce8:	4901      	ldr	r1, [pc, #4]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	608b      	str	r3, [r1, #8]
 8001cee:	e00b      	b.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40007000 	.word	0x40007000
 8001cf8:	0ffffcff 	.word	0x0ffffcff
 8001cfc:	4bac      	ldr	r3, [pc, #688]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	4aab      	ldr	r2, [pc, #684]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d02:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001d06:	6093      	str	r3, [r2, #8]
 8001d08:	4ba9      	ldr	r3, [pc, #676]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d0a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d14:	49a6      	ldr	r1, [pc, #664]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0310 	and.w	r3, r3, #16
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d010      	beq.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001d26:	4ba2      	ldr	r3, [pc, #648]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d2c:	4aa0      	ldr	r2, [pc, #640]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d32:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d36:	4b9e      	ldr	r3, [pc, #632]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d38:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d40:	499b      	ldr	r1, [pc, #620]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00a      	beq.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d54:	4b96      	ldr	r3, [pc, #600]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d5a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d62:	4993      	ldr	r1, [pc, #588]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00a      	beq.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001d76:	4b8e      	ldr	r3, [pc, #568]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d7c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d84:	498a      	ldr	r1, [pc, #552]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d00a      	beq.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001d98:	4b85      	ldr	r3, [pc, #532]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001da6:	4982      	ldr	r1, [pc, #520]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00a      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001dba:	4b7d      	ldr	r3, [pc, #500]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dc0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dc8:	4979      	ldr	r1, [pc, #484]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00a      	beq.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ddc:	4b74      	ldr	r3, [pc, #464]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001de2:	f023 0203 	bic.w	r2, r3, #3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dea:	4971      	ldr	r1, [pc, #452]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00a      	beq.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001dfe:	4b6c      	ldr	r3, [pc, #432]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e04:	f023 020c 	bic.w	r2, r3, #12
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e0c:	4968      	ldr	r1, [pc, #416]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00a      	beq.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e20:	4b63      	ldr	r3, [pc, #396]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e26:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e2e:	4960      	ldr	r1, [pc, #384]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00a      	beq.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e42:	4b5b      	ldr	r3, [pc, #364]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e48:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e50:	4957      	ldr	r1, [pc, #348]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00a      	beq.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001e64:	4b52      	ldr	r3, [pc, #328]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e6a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e72:	494f      	ldr	r1, [pc, #316]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00a      	beq.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001e86:	4b4a      	ldr	r3, [pc, #296]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e8c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e94:	4946      	ldr	r1, [pc, #280]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d00a      	beq.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001ea8:	4b41      	ldr	r3, [pc, #260]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eae:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eb6:	493e      	ldr	r1, [pc, #248]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00a      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001eca:	4b39      	ldr	r3, [pc, #228]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ed0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ed8:	4935      	ldr	r1, [pc, #212]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00a      	beq.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001eec:	4b30      	ldr	r3, [pc, #192]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ef2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001efa:	492d      	ldr	r1, [pc, #180]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d011      	beq.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001f0e:	4b28      	ldr	r3, [pc, #160]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f14:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001f1c:	4924      	ldr	r1, [pc, #144]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001f28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001f2c:	d101      	bne.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00a      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f4e:	4b18      	ldr	r3, [pc, #96]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f54:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f5c:	4914      	ldr	r1, [pc, #80]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00b      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001f70:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f76:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f80:	490b      	ldr	r1, [pc, #44]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d00f      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001f94:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f9a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001fa4:	4902      	ldr	r1, [pc, #8]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001fac:	e002      	b.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8001fae:	bf00      	nop
 8001fb0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00b      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001fc0:	4b8a      	ldr	r3, [pc, #552]	@ (80021ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fc6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fd0:	4986      	ldr	r1, [pc, #536]	@ (80021ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00b      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001fe4:	4b81      	ldr	r3, [pc, #516]	@ (80021ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fea:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ff4:	497d      	ldr	r1, [pc, #500]	@ (80021ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d006      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	f000 80d6 	beq.w	80021bc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002010:	4b76      	ldr	r3, [pc, #472]	@ (80021ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a75      	ldr	r2, [pc, #468]	@ (80021ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002016:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800201a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800201c:	f7fe fde4 	bl	8000be8 <HAL_GetTick>
 8002020:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002024:	f7fe fde0 	bl	8000be8 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b64      	cmp	r3, #100	@ 0x64
 8002030:	d901      	bls.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e195      	b.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002036:	4b6d      	ldr	r3, [pc, #436]	@ (80021ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f0      	bne.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d021      	beq.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002052:	2b00      	cmp	r3, #0
 8002054:	d11d      	bne.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002056:	4b65      	ldr	r3, [pc, #404]	@ (80021ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002058:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800205c:	0c1b      	lsrs	r3, r3, #16
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002064:	4b61      	ldr	r3, [pc, #388]	@ (80021ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002066:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800206a:	0e1b      	lsrs	r3, r3, #24
 800206c:	f003 030f 	and.w	r3, r3, #15
 8002070:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	019a      	lsls	r2, r3, #6
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	041b      	lsls	r3, r3, #16
 800207c:	431a      	orrs	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	061b      	lsls	r3, r3, #24
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	071b      	lsls	r3, r3, #28
 800208a:	4958      	ldr	r1, [pc, #352]	@ (80021ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800208c:	4313      	orrs	r3, r2
 800208e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d004      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80020a6:	d00a      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d02e      	beq.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020bc:	d129      	bne.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80020be:	4b4b      	ldr	r3, [pc, #300]	@ (80021ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020c4:	0c1b      	lsrs	r3, r3, #16
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80020cc:	4b47      	ldr	r3, [pc, #284]	@ (80021ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020d2:	0f1b      	lsrs	r3, r3, #28
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	019a      	lsls	r2, r3, #6
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	041b      	lsls	r3, r3, #16
 80020e4:	431a      	orrs	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	061b      	lsls	r3, r3, #24
 80020ec:	431a      	orrs	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	071b      	lsls	r3, r3, #28
 80020f2:	493e      	ldr	r1, [pc, #248]	@ (80021ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80020fa:	4b3c      	ldr	r3, [pc, #240]	@ (80021ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002100:	f023 021f 	bic.w	r2, r3, #31
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002108:	3b01      	subs	r3, #1
 800210a:	4938      	ldr	r1, [pc, #224]	@ (80021ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800210c:	4313      	orrs	r3, r2
 800210e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d01d      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800211e:	4b33      	ldr	r3, [pc, #204]	@ (80021ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002120:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002124:	0e1b      	lsrs	r3, r3, #24
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800212c:	4b2f      	ldr	r3, [pc, #188]	@ (80021ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800212e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002132:	0f1b      	lsrs	r3, r3, #28
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	019a      	lsls	r2, r3, #6
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	041b      	lsls	r3, r3, #16
 8002146:	431a      	orrs	r2, r3
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	061b      	lsls	r3, r3, #24
 800214c:	431a      	orrs	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	071b      	lsls	r3, r3, #28
 8002152:	4926      	ldr	r1, [pc, #152]	@ (80021ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002154:	4313      	orrs	r3, r2
 8002156:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d011      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	019a      	lsls	r2, r3, #6
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	041b      	lsls	r3, r3, #16
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	061b      	lsls	r3, r3, #24
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	071b      	lsls	r3, r3, #28
 8002182:	491a      	ldr	r1, [pc, #104]	@ (80021ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002184:	4313      	orrs	r3, r2
 8002186:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800218a:	4b18      	ldr	r3, [pc, #96]	@ (80021ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a17      	ldr	r2, [pc, #92]	@ (80021ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002190:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002194:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002196:	f7fe fd27 	bl	8000be8 <HAL_GetTick>
 800219a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800219c:	e008      	b.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800219e:	f7fe fd23 	bl	8000be8 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b64      	cmp	r3, #100	@ 0x64
 80021aa:	d901      	bls.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e0d8      	b.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80021b0:	4b0e      	ldr	r3, [pc, #56]	@ (80021ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d0f0      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	f040 80ce 	bne.w	8002360 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80021c4:	4b09      	ldr	r3, [pc, #36]	@ (80021ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a08      	ldr	r2, [pc, #32]	@ (80021ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021d0:	f7fe fd0a 	bl	8000be8 <HAL_GetTick>
 80021d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80021d6:	e00b      	b.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80021d8:	f7fe fd06 	bl	8000be8 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b64      	cmp	r3, #100	@ 0x64
 80021e4:	d904      	bls.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e0bb      	b.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80021ea:	bf00      	nop
 80021ec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80021f0:	4b5e      	ldr	r3, [pc, #376]	@ (800236c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80021f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80021fc:	d0ec      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800220e:	2b00      	cmp	r3, #0
 8002210:	d009      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800221a:	2b00      	cmp	r3, #0
 800221c:	d02e      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002222:	2b00      	cmp	r3, #0
 8002224:	d12a      	bne.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002226:	4b51      	ldr	r3, [pc, #324]	@ (800236c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002228:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800222c:	0c1b      	lsrs	r3, r3, #16
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002234:	4b4d      	ldr	r3, [pc, #308]	@ (800236c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800223a:	0f1b      	lsrs	r3, r3, #28
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	019a      	lsls	r2, r3, #6
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	041b      	lsls	r3, r3, #16
 800224c:	431a      	orrs	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	061b      	lsls	r3, r3, #24
 8002254:	431a      	orrs	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	071b      	lsls	r3, r3, #28
 800225a:	4944      	ldr	r1, [pc, #272]	@ (800236c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800225c:	4313      	orrs	r3, r2
 800225e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002262:	4b42      	ldr	r3, [pc, #264]	@ (800236c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002264:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002268:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002270:	3b01      	subs	r3, #1
 8002272:	021b      	lsls	r3, r3, #8
 8002274:	493d      	ldr	r1, [pc, #244]	@ (800236c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002276:	4313      	orrs	r3, r2
 8002278:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d022      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800228c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002290:	d11d      	bne.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002292:	4b36      	ldr	r3, [pc, #216]	@ (800236c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002294:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002298:	0e1b      	lsrs	r3, r3, #24
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80022a0:	4b32      	ldr	r3, [pc, #200]	@ (800236c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a6:	0f1b      	lsrs	r3, r3, #28
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	019a      	lsls	r2, r3, #6
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	041b      	lsls	r3, r3, #16
 80022ba:	431a      	orrs	r2, r3
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	061b      	lsls	r3, r3, #24
 80022c0:	431a      	orrs	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	071b      	lsls	r3, r3, #28
 80022c6:	4929      	ldr	r1, [pc, #164]	@ (800236c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0308 	and.w	r3, r3, #8
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d028      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80022da:	4b24      	ldr	r3, [pc, #144]	@ (800236c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e0:	0e1b      	lsrs	r3, r3, #24
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80022e8:	4b20      	ldr	r3, [pc, #128]	@ (800236c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ee:	0c1b      	lsrs	r3, r3, #16
 80022f0:	f003 0303 	and.w	r3, r3, #3
 80022f4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	019a      	lsls	r2, r3, #6
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	041b      	lsls	r3, r3, #16
 8002300:	431a      	orrs	r2, r3
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	061b      	lsls	r3, r3, #24
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	071b      	lsls	r3, r3, #28
 800230e:	4917      	ldr	r1, [pc, #92]	@ (800236c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002310:	4313      	orrs	r3, r2
 8002312:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002316:	4b15      	ldr	r3, [pc, #84]	@ (800236c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002318:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800231c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002324:	4911      	ldr	r1, [pc, #68]	@ (800236c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002326:	4313      	orrs	r3, r2
 8002328:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800232c:	4b0f      	ldr	r3, [pc, #60]	@ (800236c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a0e      	ldr	r2, [pc, #56]	@ (800236c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002332:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002336:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002338:	f7fe fc56 	bl	8000be8 <HAL_GetTick>
 800233c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002340:	f7fe fc52 	bl	8000be8 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b64      	cmp	r3, #100	@ 0x64
 800234c:	d901      	bls.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e007      	b.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002352:	4b06      	ldr	r3, [pc, #24]	@ (800236c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800235a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800235e:	d1ef      	bne.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3720      	adds	r7, #32
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40023800 	.word	0x40023800

08002370 <memset>:
 8002370:	4402      	add	r2, r0
 8002372:	4603      	mov	r3, r0
 8002374:	4293      	cmp	r3, r2
 8002376:	d100      	bne.n	800237a <memset+0xa>
 8002378:	4770      	bx	lr
 800237a:	f803 1b01 	strb.w	r1, [r3], #1
 800237e:	e7f9      	b.n	8002374 <memset+0x4>

08002380 <__libc_init_array>:
 8002380:	b570      	push	{r4, r5, r6, lr}
 8002382:	4d0d      	ldr	r5, [pc, #52]	@ (80023b8 <__libc_init_array+0x38>)
 8002384:	4c0d      	ldr	r4, [pc, #52]	@ (80023bc <__libc_init_array+0x3c>)
 8002386:	1b64      	subs	r4, r4, r5
 8002388:	10a4      	asrs	r4, r4, #2
 800238a:	2600      	movs	r6, #0
 800238c:	42a6      	cmp	r6, r4
 800238e:	d109      	bne.n	80023a4 <__libc_init_array+0x24>
 8002390:	4d0b      	ldr	r5, [pc, #44]	@ (80023c0 <__libc_init_array+0x40>)
 8002392:	4c0c      	ldr	r4, [pc, #48]	@ (80023c4 <__libc_init_array+0x44>)
 8002394:	f000 f818 	bl	80023c8 <_init>
 8002398:	1b64      	subs	r4, r4, r5
 800239a:	10a4      	asrs	r4, r4, #2
 800239c:	2600      	movs	r6, #0
 800239e:	42a6      	cmp	r6, r4
 80023a0:	d105      	bne.n	80023ae <__libc_init_array+0x2e>
 80023a2:	bd70      	pop	{r4, r5, r6, pc}
 80023a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80023a8:	4798      	blx	r3
 80023aa:	3601      	adds	r6, #1
 80023ac:	e7ee      	b.n	800238c <__libc_init_array+0xc>
 80023ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80023b2:	4798      	blx	r3
 80023b4:	3601      	adds	r6, #1
 80023b6:	e7f2      	b.n	800239e <__libc_init_array+0x1e>
 80023b8:	080023f8 	.word	0x080023f8
 80023bc:	080023f8 	.word	0x080023f8
 80023c0:	080023f8 	.word	0x080023f8
 80023c4:	080023fc 	.word	0x080023fc

080023c8 <_init>:
 80023c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ca:	bf00      	nop
 80023cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ce:	bc08      	pop	{r3}
 80023d0:	469e      	mov	lr, r3
 80023d2:	4770      	bx	lr

080023d4 <_fini>:
 80023d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023d6:	bf00      	nop
 80023d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023da:	bc08      	pop	{r3}
 80023dc:	469e      	mov	lr, r3
 80023de:	4770      	bx	lr
